apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: deploy-minusone-demo
  namespace: argo
spec:
  arguments:
    parameters:
    - description: Target environment (staging or production)
      name: environment
    - description: Docker image tag to deploy
      name: image-tag
  entrypoint: deploy
  serviceAccountName: argo
  templates:
  - name: deploy
    steps:
    - - name: update-image
        template: update-rollout-image
    - - name: wait-for-healthy
        template: wait-rollout-healthy
    - - name: verify-deployment
        template: verify-health
  - name: update-rollout-image
    script:
      command:
      - bash
      image: bitnami/kubectl:latest
      source: |
        set -e
        ENVIRONMENT="{{workflow.parameters.environment}}"
        IMAGE_TAG="{{workflow.parameters.image-tag}}"

        echo "Updating Rollout in $ENVIRONMENT to image tag: $IMAGE_TAG"

        # Update the image using kubectl patch
        kubectl patch rollout minusone-demo -n $ENVIRONMENT --type='json' \
          -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"ghcr.io/santi1s/minusone-demo:'$IMAGE_TAG'"}]'

        echo "Rollout updated successfully"
  - name: wait-rollout-healthy
    script:
      command:
      - bash
      image: quay.io/argoproj/kubectl-argo-rollouts:v1.7.2
      source: |
        set -e
        ENVIRONMENT="{{workflow.parameters.environment}}"

        echo "Waiting for rollout to become healthy in $ENVIRONMENT..."
        kubectl argo rollouts status minusone-demo -n $ENVIRONMENT --watch --timeout 10m

        echo "Rollout is healthy!"
  - name: verify-health
    script:
      command:
      - sh
      image: curlimages/curl:latest
      source: |
        set -e
        ENVIRONMENT="{{workflow.parameters.environment}}"

        if [ "$ENVIRONMENT" = "staging" ]; then
          SERVICE_URL="http://minusone-demo.staging.svc.cluster.local"
        else
          SERVICE_URL="http://minusone-demo.production.svc.cluster.local"
        fi

        echo "Verifying health endpoint: $SERVICE_URL/health"
        RESPONSE=$(curl -s $SERVICE_URL/health)
        echo "Response: $RESPONSE"

        # Check if response contains "healthy"
        echo "$RESPONSE" | grep -q "healthy" && echo "Health check passed!" || exit 1
